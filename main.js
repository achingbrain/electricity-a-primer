"use strict";!function(e){function t(i){if(n[i])return n[i].exports;var r=n[i]={exports:{},id:i,loaded:!1};return e[i].call(r.exports,r,r.exports,t),r.loaded=!0,r.exports}var n={};return t.m=e,t.c=n,t.p="",t(0)}([function(e,t,n){n(1);var i=n(2),r=n(3),o=n(4),a=n(5),s=n(6),c=n(7),l=n(8),u=n(9),d=n(10),p=n(11),f=n(13),g=[r(),o(),a(),s("li, .bullet"),c(),l(),u(),d(),p(),f()];try{n(!function(){var e=new Error('Cannot find module "plugins"');throw e.code="MODULE_NOT_FOUND",e}())(g)}catch(h){}var m=i.from("article",g);try{n(!function(){var e=new Error('Cannot find module "deck"');throw e.code="MODULE_NOT_FOUND",e}())(m)}catch(h){}},function(e,t){(function(t){var n="undefined"!=typeof window?window:"undefined"!=typeof WorkerGlobalScope&&self instanceof WorkerGlobalScope?self:{},i=function(){var e=/\blang(?:uage)?-(?!\*)(\w+)\b/i,t=n.Prism={util:{encode:function(e){return e instanceof i?new i(e.type,t.util.encode(e.content),e.alias):"Array"===t.util.type(e)?e.map(t.util.encode):e.replace(/&/g,"&amp;").replace(/</g,"&lt;").replace(/\u00a0/g," ")},type:function(e){return Object.prototype.toString.call(e).match(/\[object (\w+)\]/)[1]},clone:function o(e){var n=t.util.type(e);switch(n){case"Object":var o={};for(var i in e)e.hasOwnProperty(i)&&(o[i]=t.util.clone(e[i]));return o;case"Array":return e.map&&e.map(function(e){return t.util.clone(e)})}return e}},languages:{extend:function(e,n){var i=t.util.clone(t.languages[e]);for(var r in n)i[r]=n[r];return i},insertBefore:function(e,n,i,r){r=r||t.languages;var o=r[e];if(2==arguments.length){i=arguments[1];for(var a in i)i.hasOwnProperty(a)&&(o[a]=i[a]);return o}var s={};for(var c in o)if(o.hasOwnProperty(c)){if(c==n)for(var a in i)i.hasOwnProperty(a)&&(s[a]=i[a]);s[c]=o[c]}return t.languages.DFS(t.languages,function(t,n){n===r[e]&&t!=e&&(this[t]=s)}),r[e]=s},DFS:function(e,n,i){for(var r in e)e.hasOwnProperty(r)&&(n.call(e,r,e[r],i||r),"Object"===t.util.type(e[r])?t.languages.DFS(e[r],n):"Array"===t.util.type(e[r])&&t.languages.DFS(e[r],n,r))}},plugins:{},highlightAll:function(e,n){for(var i,r=document.querySelectorAll('code[class*="language-"], [class*="language-"] code, code[class*="lang-"], [class*="lang-"] code'),o=0;i=r[o++];)t.highlightElement(i,e===!0,n)},highlightElement:function(i,r,o){for(var a,s,c=i;c&&!e.test(c.className);)c=c.parentNode;c&&(a=(c.className.match(e)||[,""])[1],s=t.languages[a]),i.className=i.className.replace(e,"").replace(/\s+/g," ")+" language-"+a,c=i.parentNode,/pre/i.test(c.nodeName)&&(c.className=c.className.replace(e,"").replace(/\s+/g," ")+" language-"+a);var l=i.textContent,u={element:i,language:a,grammar:s,code:l};if(!l||!s)return void t.hooks.run("complete",u);if(t.hooks.run("before-highlight",u),r&&n.Worker){var d=new Worker(t.filename);d.onmessage=function(e){u.highlightedCode=e.data,t.hooks.run("before-insert",u),u.element.innerHTML=u.highlightedCode,o&&o.call(u.element),t.hooks.run("after-highlight",u),t.hooks.run("complete",u)},d.postMessage(JSON.stringify({language:u.language,code:u.code,immediateClose:!0}))}else u.highlightedCode=t.highlight(u.code,u.grammar,u.language),t.hooks.run("before-insert",u),u.element.innerHTML=u.highlightedCode,o&&o.call(i),t.hooks.run("after-highlight",u),t.hooks.run("complete",u)},highlight:function(e,n,r){var o=t.tokenize(e,n);return i.stringify(t.util.encode(o),r)},tokenize:function(e,n,i){var r=t.Token,o=[e],a=n.rest;if(a){for(var s in a)n[s]=a[s];delete n.rest}e:for(var s in n)if(n.hasOwnProperty(s)&&n[s]){var c=n[s];c="Array"===t.util.type(c)?c:[c];for(var l=0;l<c.length;++l){var u=c[l],d=u.inside,p=!!u.lookbehind,f=0,g=u.alias;u=u.pattern||u;for(var h=0;h<o.length;h++){var m=o[h];if(o.length>e.length)break e;if(!(m instanceof r)){u.lastIndex=0;var b=u.exec(m);if(b){p&&(f=b[1].length);var v=b.index-1+f,b=b[0].slice(f),y=b.length,k=v+y,w=m.slice(0,v+1),x=m.slice(k+1),E=[h,1];w&&E.push(w);var O=new r(s,d?t.tokenize(b,d):b,g);E.push(O),x&&E.push(x),Array.prototype.splice.apply(o,E)}}}}}return o},hooks:{all:{},add:function(e,n){var i=t.hooks.all;i[e]=i[e]||[],i[e].push(n)},run:function(e,n){var i=t.hooks.all[e];if(i&&i.length)for(var r,o=0;r=i[o++];)r(n)}}},i=t.Token=function(e,t,n){this.type=e,this.content=t,this.alias=n};if(i.stringify=function(e,n,r){if("string"==typeof e)return e;if("Array"===t.util.type(e))return e.map(function(t){return i.stringify(t,n,e)}).join("");var o={type:e.type,content:i.stringify(e.content,n,r),tag:"span",classes:["token",e.type],attributes:{},language:n,parent:r};if("comment"==o.type&&(o.attributes.spellcheck="true"),e.alias){var a="Array"===t.util.type(e.alias)?e.alias:[e.alias];Array.prototype.push.apply(o.classes,a)}t.hooks.run("wrap",o);var s="";for(var c in o.attributes)s+=(s?" ":"")+c+'="'+(o.attributes[c]||"")+'"';return"<"+o.tag+' class="'+o.classes.join(" ")+'" '+s+">"+o.content+"</"+o.tag+">"},!n.document)return n.addEventListener?(n.addEventListener("message",function(e){var i=JSON.parse(e.data),r=i.language,o=i.code,a=i.immediateClose;n.postMessage(t.highlight(o,t.languages[r],r)),a&&n.close()},!1),n.Prism):n.Prism;var r=document.getElementsByTagName("script");return r=r[r.length-1],r&&(t.filename=r.src,document.addEventListener&&!r.hasAttribute("data-manual")&&document.addEventListener("DOMContentLoaded",t.highlightAll)),n.Prism}();"undefined"!=typeof e&&e.exports&&(e.exports=i),"undefined"!=typeof t&&(t.Prism=i),i.languages.markup={comment:/<!--[\w\W]*?-->/,prolog:/<\?[\w\W]+?\?>/,doctype:/<!DOCTYPE[\w\W]+?>/,cdata:/<!\[CDATA\[[\w\W]*?]]>/i,tag:{pattern:/<\/?(?!\d)[^\s>\/=.$<]+(?:\s+[^\s>\/=]+(?:=(?:("|')(?:\\\1|\\?(?!\1)[\w\W])*\1|[^\s'">=]+))?)*\s*\/?>/i,inside:{tag:{pattern:/^<\/?[^\s>\/]+/i,inside:{punctuation:/^<\/?/,namespace:/^[^\s>\/:]+:/}},"attr-value":{pattern:/=(?:('|")[\w\W]*?(\1)|[^\s>]+)/i,inside:{punctuation:/[=>"']/}},punctuation:/\/?>/,"attr-name":{pattern:/[^\s>\/]+/,inside:{namespace:/^[^\s>\/:]+:/}}}},entity:/&#?[\da-z]{1,8};/i},i.hooks.add("wrap",function(e){"entity"===e.type&&(e.attributes.title=e.content.replace(/&amp;/,"&"))}),i.languages.xml=i.languages.markup,i.languages.html=i.languages.markup,i.languages.mathml=i.languages.markup,i.languages.svg=i.languages.markup,i.languages.css={comment:/\/\*[\w\W]*?\*\//,atrule:{pattern:/@[\w-]+?.*?(;|(?=\s*\{))/i,inside:{rule:/@[\w-]+/}},url:/url\((?:(["'])(\\(?:\r\n|[\w\W])|(?!\1)[^\\\r\n])*\1|.*?)\)/i,selector:/[^\{\}\s][^\{\};]*?(?=\s*\{)/,string:/("|')(\\(?:\r\n|[\w\W])|(?!\1)[^\\\r\n])*\1/,property:/(\b|\B)[\w-]+(?=\s*:)/i,important:/\B!important\b/i,"function":/[-a-z0-9]+(?=\()/i,punctuation:/[(){};:]/},i.languages.css.atrule.inside.rest=i.util.clone(i.languages.css),i.languages.markup&&(i.languages.insertBefore("markup","tag",{style:{pattern:/(<style[\w\W]*?>)[\w\W]*?(?=<\/style>)/i,lookbehind:!0,inside:i.languages.css,alias:"language-css"}}),i.languages.insertBefore("inside","attr-value",{"style-attr":{pattern:/\s*style=("|').*?\1/i,inside:{"attr-name":{pattern:/^\s*style/i,inside:i.languages.markup.tag.inside},punctuation:/^\s*=\s*['"]|['"]\s*$/,"attr-value":{pattern:/.+/i,inside:i.languages.css}},alias:"language-css"}},i.languages.markup.tag)),i.languages.clike={comment:[{pattern:/(^|[^\\])\/\*[\w\W]*?\*\//,lookbehind:!0},{pattern:/(^|[^\\:])\/\/.*/,lookbehind:!0}],string:/(["'])(\\(?:\r\n|[\s\S])|(?!\1)[^\\\r\n])*\1/,"class-name":{pattern:/((?:\b(?:class|interface|extends|implements|trait|instanceof|new)\s+)|(?:catch\s+\())[a-z0-9_\.\\]+/i,lookbehind:!0,inside:{punctuation:/(\.|\\)/}},keyword:/\b(if|else|while|do|for|return|in|instanceof|function|new|try|throw|catch|finally|null|break|continue)\b/,"boolean":/\b(true|false)\b/,"function":/[a-z0-9_]+(?=\()/i,number:/\b-?(?:0x[\da-f]+|\d*\.?\d+(?:e[+-]?\d+)?)\b/i,operator:/--?|\+\+?|!=?=?|<=?|>=?|==?=?|&&?|\|\|?|\?|\*|\/|~|\^|%/,punctuation:/[{}[\];(),.:]/},i.languages.javascript=i.languages.extend("clike",{keyword:/\b(as|async|await|break|case|catch|class|const|continue|debugger|default|delete|do|else|enum|export|extends|finally|for|from|function|get|if|implements|import|in|instanceof|interface|let|new|null|of|package|private|protected|public|return|set|static|super|switch|this|throw|try|typeof|var|void|while|with|yield)\b/,number:/\b-?(0x[\dA-Fa-f]+|0b[01]+|0o[0-7]+|\d*\.?\d+([Ee][+-]?\d+)?|NaN|Infinity)\b/,"function":/[_$a-zA-Z\xA0-\uFFFF][_$a-zA-Z0-9\xA0-\uFFFF]*(?=\()/i}),i.languages.insertBefore("javascript","keyword",{regex:{pattern:/(^|[^\/])\/(?!\/)(\[.+?]|\\.|[^\/\\\r\n])+\/[gimyu]{0,5}(?=\s*($|[\r\n,.;})]))/,lookbehind:!0}}),i.languages.insertBefore("javascript","class-name",{"template-string":{pattern:/`(?:\\`|\\?[^`])*`/,inside:{interpolation:{pattern:/\$\{[^}]+\}/,inside:{"interpolation-punctuation":{pattern:/^\$\{|\}$/,alias:"punctuation"},rest:i.languages.javascript}},string:/[\s\S]+/}}}),i.languages.markup&&i.languages.insertBefore("markup","tag",{script:{pattern:/(<script[\w\W]*?>)[\w\W]*?(?=<\/script>)/i,lookbehind:!0,inside:i.languages.javascript,alias:"language-javascript"}}),i.languages.js=i.languages.javascript,function(){"undefined"!=typeof self&&self.Prism&&self.document&&document.querySelector&&(self.Prism.fileHighlight=function(){var e={js:"javascript",html:"markup",svg:"markup",xml:"markup",py:"python",rb:"ruby",ps1:"powershell",psm1:"powershell"};Array.prototype.forEach&&Array.prototype.slice.call(document.querySelectorAll("pre[data-src]")).forEach(function(t){for(var n,r=t.getAttribute("data-src"),o=t,a=/\blang(?:uage)?-(?!\*)(\w+)\b/i;o&&!a.test(o.className);)o=o.parentNode;if(o&&(n=(t.className.match(a)||[,""])[1]),!n){var s=(r.match(/\.(\w+)$/)||[,""])[1];n=e[s]||s}var c=document.createElement("code");c.className="language-"+n,t.textContent="",c.textContent="Loading…",t.appendChild(c);var l=new XMLHttpRequest;l.open("GET",r,!0),l.onreadystatechange=function(){4==l.readyState&&(l.status<400&&l.responseText?(c.textContent=l.responseText,i.highlightElement(c)):l.status>=400?c.textContent="✖ Error "+l.status+" while fetching file: "+l.statusText:c.textContent="✖ Error: File does not exist or is empty")},l.send(null)})},self.Prism.fileHighlight())}()}).call(t,function(){return this}())},function(e,t){var n=function(e,t){var n=1===(e.parent||e).nodeType?e.parent||e:document.querySelector(e.parent||e),i=[].filter.call("string"==typeof e.slides?n.querySelectorAll(e.slides):e.slides||n.children,function(e){return"SCRIPT"!==e.nodeName}),r=i[0],o={},a=function(e,t){i[e]&&(d("deactivate",p(r,t)),r=i[e],d("activate",p(r,t)))},s=function(e,t){return arguments.length?void(d("slide",p(i[e],t))&&a(e,t)):i.indexOf(r)},c=function(e,t){var n=i.indexOf(r)+e;d(e>0?"next":"prev",p(r,t))&&a(n,t)},l=function(e,t){return(o[e]||(o[e]=[])).push(t),u.bind(null,e,t)},u=function(e,t){o[e]=(o[e]||[]).filter(function(e){return e!==t})},d=function(e,t){return(o[e]||[]).reduce(function(e,n){return e&&n(t)!==!1},!0)},p=function(e,t){return t=t||{},t.index=i.indexOf(e),t.slide=e,t},f={on:l,off:u,fire:d,slide:s,next:c.bind(null,1),prev:c.bind(null,-1),parent:n,slides:i};return(t||[]).forEach(function(e){e(f)}),a(0),f};e.exports={from:n}},function(e,t,n){var i,i;!function(t){e.exports=t()}(function(){return function e(t,n,r){function o(s,c){if(!n[s]){if(!t[s]){var l="function"==typeof i&&i;if(!c&&l)return i(s,!0);if(a)return a(s,!0);throw new Error("Cannot find module '"+s+"'")}var u=n[s]={exports:{}};t[s][0].call(u.exports,function(e){var n=t[s][1][e];return o(n?n:e)},u,u.exports,e,t,n,r)}return n[s].exports}for(var a="function"==typeof i&&i,s=0;s<r.length;s++)o(r[s]);return o}({1:[function(e,t,n){var i=e("bespoke-classes"),r=e("insert-css");t.exports=function(){var e='/*! normalize.css v3.0.0 | MIT License | git.io/normalize */html{font-family:sans-serif;-ms-text-size-adjust:100%;-webkit-text-size-adjust:100%}body{margin:0}article,aside,details,figcaption,figure,footer,header,hgroup,main,nav,section,summary{display:block}audio,canvas,progress,video{display:inline-block;vertical-align:baseline}audio:not([controls]){display:none;height:0}[hidden],template{display:none}a{background:0 0}a:active,a:hover{outline:0}abbr[title]{border-bottom:1px dotted}b{font-weight:700}dfn{font-style:italic}h1{font-size:2em}mark{background:#ff0;color:#000}small{font-size:80%}sub,sup{font-size:75%;line-height:0;position:relative;vertical-align:baseline}sup{top:-.5em}sub{bottom:-.25em}img{border:0}svg:not(:root){overflow:hidden}figure{margin:1em 40px}hr{box-sizing:content-box}pre{overflow:auto}code,kbd,pre,samp{font-size:1em}kbd,pre,samp{font-family:monospace,monospace}button,input,optgroup,select,textarea{color:inherit;font:inherit;margin:0}button{overflow:visible}button,select{text-transform:none}button,html input[type="button"],input[type="reset"],input[type="submit"]{-webkit-appearance:button;cursor:pointer}button[disabled],html input[disabled]{cursor:default}button::-moz-focus-inner,input::-moz-focus-inner{border:0;padding:0}input{line-height:normal}input[type="checkbox"],input[type="radio"]{box-sizing:border-box;padding:0}input[type="number"]::-webkit-inner-spin-button,input[type="number"]::-webkit-outer-spin-button{height:auto}input[type="search"]{-webkit-appearance:textfield;box-sizing:content-box}input[type="search"]::-webkit-search-cancel-button,input[type="search"]::-webkit-search-decoration{-webkit-appearance:none}fieldset{border:1px solid silver;margin:0 2px;padding:.35em .625em .75em}legend{border:0;padding:0}textarea{overflow:auto}optgroup{font-weight:700}table{border-collapse:collapse;border-spacing:0}td,th,*{padding:0}*{margin:0}html{-webkit-text-size-adjust:auto;-ms-text-size-adjust:auto;text-size-adjust:auto}.bespoke-parent{font-size:1.5em;background:#111;color:#ddd;font-family:futura,helvetica,arial,arial,sans-serif;overflow:hidden;text-align:center;-webkit-transition:background 1s ease;transition:background 1s ease;background-position:50% 50%}.bespoke-parent,.bespoke-scale-parent{position:absolute;top:0;left:0;right:0;bottom:0}.bespoke-scale-parent{pointer-events:none;z-index:1}.bespoke-scale-parent .bespoke-active{pointer-events:auto}.bespoke-slide{-webkit-transition:opacity .5s ease;transition:opacity .5s ease;width:940px;height:480px;position:absolute;top:50%;left:50%;margin-left:-470px;margin-top:-240px;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-box-orient:vertical;-webkit-box-direction:normal;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;-webkit-box-pack:center;-webkit-justify-content:center;-ms-flex-pack:center;justify-content:center;-webkit-box-align:center;-webkit-align-items:center;-ms-flex-align:center;align-items:center;z-index:1}.bespoke-active{-webkit-transition-delay:.5s;transition-delay:.5s}.bespoke-active[data-bespoke-backdrop]{-webkit-transition-delay:.75s;transition-delay:.75s}.bespoke-inactive{opacity:0;pointer-events:none}.bespoke-backdrop{-webkit-transition:opacity 1s ease;position:absolute;top:0;left:0;right:0;bottom:0}.bespoke-progress-parent{position:absolute;top:0;left:0;right:0;height:.3vw;z-index:1}.bespoke-progress-bar{background:#ddd;position:absolute;top:0;left:0;height:100%;-webkit-transition:width 1s ease;transition:width 1s ease}.bespoke-bullet{-webkit-transition:opacity .3s ease;transition:opacity .3s ease}.bespoke-bullet-inactive{opacity:0}strong{font-weight:400}hr{width:50%;margin:1rem auto;height:1px;border:0;background:#ddd}h3,p,li{padding-left:20px;padding-right:20px}h3,h4,p,li,pre{font-weight:200}h1{line-height:1.4em;padding:1em;border:1px solid #ddd;border-left-width:0;border-right-width:0;min-width:8em}h1,h2{letter-spacing:.3em;text-transform:uppercase;font-weight:400;margin:.17em 0;position:relative}h2{line-height:1.1em;padding:0 0 0 .3em}h3{font-family:didot,times new roman,serif;font-style:italic;font-size:1.2em;line-height:1.6em;margin:.5em 0}h4{text-transform:uppercase;font-size:.8em;line-height:1.8em;letter-spacing:.3em;margin:1em 0}ul,ol{padding:0;margin:0;text-align:left}li{list-style:none;margin:.2em;font-style:normal;-webkit-transform:translateX(-6px);-ms-transform:translateX(-6px);transform:translateX(-6px)}li:before{content:\'\\2014\';margin-right:4px}pre{background:none!important}code{font-family:prestige elite std,consolas,courier new,monospace!important;font-style:normal;font-weight:200!important;text-align:left}a{padding-left:.3em;color:currentColor;text-decoration:none;border-bottom:1px solid currentColor}.emphatic{background:#f30}.single-words{word-spacing:9999px;line-height:2.9em;overflow:hidden}.bespoke-backdrop{opacity:0;-webkit-transition:opacity 1s ease,-webkit-transform 6s ease;transition:opacity 1s ease,transform 6s ease;background-size:cover;background-position:50% 50%;-webkit-transform:translateZ(0)scale(1.3);transform:translateZ(0)scale(1.3)}.bespoke-backdrop-active,.bespoke-backdrop-before{-webkit-transform:translateZ(0);transform:translateZ(0)}.bespoke-backdrop-before{-webkit-transition-delay:.2s;transition-delay:.2s}.bespoke-backdrop-active{opacity:.5}';return r(e,{prepend:!0}),function(e){i()(e)}}},{"bespoke-classes":2,"insert-css":3}],2:[function(e,t,n){t.exports=function(){return function(e){var t=function(e,t){e.classList.add("bespoke-"+t)},n=function(e,t){e.className=e.className.replace(new RegExp("bespoke-"+t+"(\\s|$)","g")," ").trim()},i=function(i,r){var o=e.slides[e.slide()],a=r-e.slide(),s=a>0?"after":"before";["before(-\\d+)?","after(-\\d+)?","active","inactive"].map(n.bind(null,i)),i!==o&&["inactive",s,s+"-"+Math.abs(a)].map(t.bind(null,i))};t(e.parent,"parent"),e.slides.map(function(e){t(e,"slide")}),e.on("activate",function(r){e.slides.map(i),t(r.slide,"active"),n(r.slide,"inactive")})}}},{}],3:[function(e,t,n){var i={};t.exports=function(e,t){if(!i[e]){i[e]=!0;var n=document.createElement("style");n.setAttribute("type","text/css"),"textContent"in n?n.textContent=e:n.styleSheet.cssText=e;var r=document.getElementsByTagName("head")[0];t&&t.prepend?r.insertBefore(n,r.childNodes[0]):r.appendChild(n)}}},{}]},{},[1])(1)})},function(e,t){e.exports=function(e){return function(t){var n="vertical"!==e;document.addEventListener("keydown",function(e){(34==e.which||32==e.which&&!e.shiftKey||n&&39==e.which||!n&&40==e.which)&&t.next(),(33==e.which||32==e.which&&e.shiftKey||n&&37==e.which||!n&&38==e.which)&&t.prev()})}}},function(e,t){e.exports=function(e){return function(t){var n,i,r="vertical"==e?"Y":"X";t.parent.addEventListener("touchstart",function(e){1==e.touches.length&&(n=e.touches[0]["page"+r],i=0)}),t.parent.addEventListener("touchmove",function(e){1==e.touches.length&&(e.preventDefault(),i=e.touches[0]["page"+r]-n)}),t.parent.addEventListener("touchend",function(){Math.abs(i)>50&&t[i>0?"prev":"next"]()})}}},function(e,t){e.exports=function(e){return function(t){var n,i,r=t.slides.map(function(t){return[].slice.call(t.querySelectorAll("string"==typeof e?e:"[data-bespoke-bullet]"),0)}),o=function(){var e=n+1;return c(1)?(s(n,i+1),!1):void(r[e]&&s(e,0))},a=function(){var e=n-1;return c(-1)?(s(n,i-1),!1):void(r[e]&&s(e,r[e].length-1))},s=function(e,t){n=e,i=t,r.forEach(function(n,i){n.forEach(function(n,r){n.classList.add("bespoke-bullet"),e>i||i===e&&t>=r?(n.classList.add("bespoke-bullet-active"),n.classList.remove("bespoke-bullet-inactive")):(n.classList.add("bespoke-bullet-inactive"),n.classList.remove("bespoke-bullet-active")),i===e&&r===t?n.classList.add("bespoke-bullet-current"):n.classList.remove("bespoke-bullet-current")})})},c=function(e){return void 0!==r[n][i+e]};t.on("next",o),t.on("prev",a),t.on("slide",function(e){s(e.index,0)}),s(0,0)}}},function(e,t){e.exports=function(){return function(e){function t(t){var n=t.getAttribute("data-bespoke-backdrop");if(n){var i=document.createElement("div");return i.className=n,i.classList.add("bespoke-backdrop"),e.parent.appendChild(i),i}}function n(t){if(t){var n=o.indexOf(t),a=e.slide();i(t,"active"),i(t,"inactive"),i(t,"before"),i(t,"after"),n!==a?(r(t,"inactive"),r(t,a>n?"before":"after")):r(t,"active")}}function i(e,t){e.classList.remove("bespoke-backdrop-"+t)}function r(e,t){e.classList.add("bespoke-backdrop-"+t)}var o;o=e.slides.map(t),e.on("activate",function(){o.forEach(n)})}}},function(e,t){e.exports=function(e){return function(t){var n=t.parent,i=t.slides[0],r=i.offsetHeight,o=i.offsetWidth,a="zoom"===e||"zoom"in n.style&&"transform"!==e,s=function(e){var t=document.createElement("div");return t.className="bespoke-scale-parent",e.parentNode.insertBefore(t,e),t.appendChild(e),t},c=a?t.slides:t.slides.map(s),l=function(e){var t="Moz Webkit O ms".split(" ");return t.reduce(function(t,i){return i+e in n.style?i+e:t},e.toLowerCase())}("Transform"),u=a?function(e,t){t.style.zoom=e}:function(e,t){t.style[l]="scale("+e+")"},d=function(){var e=n.offsetWidth/o,t=n.offsetHeight/r;c.forEach(u.bind(null,Math.min(e,t)))};window.addEventListener("resize",d),d()}}},function(e,t){e.exports=function(){return function(e){var t=function(){var t=window.location.hash.slice(1),i=parseInt(t,10);t&&(i?n(i-1):e.slides.forEach(function(e,i){e.getAttribute("data-bespoke-hash")===t&&n(i)}))},n=function(t){var n=t>-1&&t<e.slides.length?t:0;n!==e.slide()&&e.slide(n)};setTimeout(function(){t(),e.on("activate",function(e){var t=e.slide.getAttribute("data-bespoke-hash");window.location.hash=t||e.index+1}),window.addEventListener("hashchange",t)},0)}}},function(e,t){e.exports=function(e){return function(t){var n=document.createElement("div"),i=document.createElement("div"),r="vertical"===e?"height":"width";n.className="bespoke-progress-parent",i.className="bespoke-progress-bar",n.appendChild(i),t.parent.appendChild(n),t.on("activate",function(e){i.style[r]=100*e.index/(t.slides.length-1)+"%"})}}},function(e,t,n){var i="indexfinger",r=function(e){return e("return this")()}(Function),o=r.bespoke&&r.bespoke.plugins&&r.bespoke.plugins.convenient||n(12),a=o.builder(i),s=function(e){var t=function(e){var t=(a.activateDeck(e),{}),n=null,i=-1,r={enableActiveSlideListener:function(){t.saveActiveSlide=this.on("activate",r.saveActiveSlide.bind(this))},saveActiveSlide:function(e){n=e.slide,i=e.index},getActiveSlide:function(){return n},getActiveSlideIndex:function(){return i}},o=function(){e.getActiveSlide=r.getActiveSlide.bind(e),e.getActiveSlideIndex=r.getActiveSlideIndex.bind(e)},s=function(){r.enableActiveSlideListener.call(e)},c=function(){o(),s()};c()};return t};e.exports=s},function(e,t){var n,i="convenient",r=function(e){return e("return this")()}(Function),o={logger:{log:function(){console.log.apply(console,arguments)}}},a=function(){var e={};e.logger={},e.logger.log=r.convenientOptions&&r.convenientOptions.logger&&r.convenientOptions.logger.log||o.logger.log,r.convenientOptions=e},s={},c=[],l=function(e){if(!e)throw n.generateErrorObject("deck must be defined.");var t=c.some(function(t){return t.deck===e});return t},u=function(e){var t=l(e);t||c.push({deck:e,storage:{}})},d=function(e,t){if(!e)throw n.generateErrorObject("pluginName must be defined.");if(!t)throw n.generateErrorObject("deck must be defined.");var i=s.getDeckStorage(t),r=!(!i||!i[e]);return r},p=function(e,t){if(!e)throw n.generateErrorObject("pluginName must be defined.");if(!t)throw n.generateErrorObject("deck must be defined.");var i=s.getDeckStorage(t);i||(u(t),i=s.getDeckStorage(t)),i[e]={}},f=function(e){return!isNaN(parseFloat(e))&&isFinite(e)},g=function(){a()};s.builder=function(e){if(!e)throw n.generateErrorObject("The plugin options were not properly defined.");if("string"==typeof e&&(e={pluginName:e}),"string"!=typeof e.pluginName)throw n.generateErrorObject("The plugin name was not properly defined.");var t={},i="bespoke."+e.pluginName,o=function(e){return new Error(i+": "+e)},a=e.pluginName,c=function(e){return a+"."+e},l=function(e,t,n,i,r,o){var a=s.createEventData.call(e,t,n,i,r,o);return a},u=function(e,t,n,i,r){return e.fire(c(t),l(e,a,t,n,i,r))},f=function(){var e=[i];r.convenientOptions.logger.log.apply(r.convenientOptions.logger.log,e.concat(s.copyArray(arguments)))},g=function(t){var i=d(e.pluginName,t);if(i)throw n.generateErrorObject("The '"+e.pluginName+"' plugin has already been activated for this deck, can't activate it twice.")},h=function(e){var n={};return n.createEventData=t.createEventData.bind(this,e),n.fire=t.fire.bind(this,e),n.getStorage=t.getStorage.bind(this,e),n.log=t.log.bind(this,e),n},m=function(t){var n;return g(t),p(e.pluginName,t),n=h(t)},b=function(){t.createEventData=l.bind(this),t.generateErrorObject=o.bind(this),t.fire=u.bind(this),t.log=f.bind(this),t.activateDeck=m.bind(this),t.getStorage=s.getDeckPluginStorage.bind(this,e.pluginName)},v=function(){b()};return v(),t},s.getDeckStorage=function(e){if(!e)throw n.generateErrorObject("deck must be defined.");var t=null;return c.some(function(n){return n.deck===e?(t=n.storage,!0):!1}),t},s.getDeckPluginStorage=function(e,t){if(!e)throw n.generateErrorObject("pluginName must be defined.");if(!t)throw n.generateErrorObject("deck must be defined.");var i=s.getDeckStorage(t);if(!i)throw n.generateErrorObject("storage was not initiated for this deck.");return i[e]},s.createEventData=function(e,t,n,i,r){return r=r||{},r.eventNamespace=e||null,r.eventName=t||null,r.innerEvent=n||null,f(i)?(r.index=i,r.slide=this.slides[i]):(r.index=this.slides.indexOf(i),r.slide=i),r},s.copyArray=function(e){return[].slice.call(e,0)},n=s.builder(i),g(),e.exports=s},function(e,t,n){var i="secondary",r=function(e){return e("return this")()}(Function),o=r.bespoke&&r.bespoke.plugins&&r.bespoke.plugins.convenient||n(12),a=o.builder(i),s=(r.bespoke&&r.bespoke.plugins&&r.bespoke.plugins.indexfinger||n(11),{S:83}),c={notes:"aside",keys:{toggle:s.S}},l=function(e,t){var n,i;return void 0===t&&(t=e,e=0),n=t-e,i=e+Math.floor(Math.random()*n)},u=i+"-window-",d=function(){var e=l(1e3,1e4),t=u+e;return t},p=function(e){e.body.innerHTML="<h1>Notes</h1><div id='notes'></div>"},f=function(e){var t=function(t){var n=a.activateDeck(t),i={},r={getNotesElement:function(){return this.secondary.window&&this.secondary.window.document&&this.secondary.window.document.getElementById("notes")},isOpen:function(){var e=this.secondary,t=e.window,n=!(void 0===e||null===t||t.closed===!0||t.opener!==window||null===this.secondary.getNotesElement());return n},open:function(){return this.secondary.isOpen()||(this.secondary.window=window.open(),p(this.secondary.window.document)),this.secondary.isOpen()},close:function(){return this.secondary.isOpen()&&this.secondary.window.close(),!this.secondary.isOpen()},focus:function(){return this.secondary.isOpen()&&this.secondary.window.focus(),this.secondary.isOpen()},toggle:function(){return this.secondary.isOpen()?this.secondary.close():this.secondary.open(),this.secondary.isOpen()},synchronize:function(){var t,n,i,r;return this.secondary.isOpen()?(t=this.secondary.getNotesElement(),n=this.getActiveSlide(),i=o.copyArray(n.querySelectorAll(e.notes)),r=i.reduce(function(e,t){return e+t.outerHTML},""),t.innerHTML=r,this.secondary.isOpen()):!1}},s=function(){t.secondary={window:null,secondaryWindowName:d(),getNotesElement:r.getNotesElement.bind(t),isOpen:r.isOpen.bind(t),open:r.open.bind(t),close:r.close.bind(t),focus:r.focus.bind(t),toggle:r.toggle.bind(t),synchronize:r.synchronize.bind(t)}},l=function(){var t={};e=e||{},t.keys={},t.keys.toggle=e.keys&&e.keys.toggle||c.keys.toggle,t.notes=e.notes||c.notes,e=t},u=function(i){var r=!1;return i.altKey||i.ctrlKey||i.metaKey||i.shiftKey||(r=r||i.which===e.keys.toggle&&n.fire("toggle",i)&&t.secondary.toggle()&&t.secondary.synchronize()),r&&i.preventDefault(),!r},f=function(){return t.secondary.close(),null},g=function(){t.secondary.synchronize()},h=function(){window.onbeforeunload=f,document.addEventListener("keydown",u,!1),i.activate=t.on("activate",g)},m=function(){l(),s(),h()};m()};return t};e.exports=f}]);
//# sourceMappingURL=data:application/json;base64,
